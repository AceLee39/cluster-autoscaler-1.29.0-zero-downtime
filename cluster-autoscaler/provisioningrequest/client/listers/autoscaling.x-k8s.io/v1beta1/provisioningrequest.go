/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	v1beta1 "k8s.io/autoscaler/cluster-autoscaler/provisioningrequest/apis/autoscaling.x-k8s.io/v1beta1"
	"k8s.io/client-go/tools/cache"
)

// ProvisioningRequestLister helps list ProvisioningRequests.
// All objects returned here must be treated as read-only.
type ProvisioningRequestLister interface {
	// List lists all ProvisioningRequests in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ProvisioningRequest, err error)
	// ProvisioningRequests returns an object that can list and get ProvisioningRequests.
	ProvisioningRequests(namespace string) ProvisioningRequestNamespaceLister
	ProvisioningRequestListerExpansion
}

// provisioningRequestLister implements the ProvisioningRequestLister interface.
type provisioningRequestLister struct {
	indexer cache.Indexer
}

// NewProvisioningRequestLister returns a new ProvisioningRequestLister.
func NewProvisioningRequestLister(indexer cache.Indexer) ProvisioningRequestLister {
	return &provisioningRequestLister{indexer: indexer}
}

// List lists all ProvisioningRequests in the indexer.
func (s *provisioningRequestLister) List(selector labels.Selector) (ret []*v1beta1.ProvisioningRequest, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ProvisioningRequest))
	})
	return ret, err
}

// ProvisioningRequests returns an object that can list and get ProvisioningRequests.
func (s *provisioningRequestLister) ProvisioningRequests(namespace string) ProvisioningRequestNamespaceLister {
	return provisioningRequestNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProvisioningRequestNamespaceLister helps list and get ProvisioningRequests.
// All objects returned here must be treated as read-only.
type ProvisioningRequestNamespaceLister interface {
	// List lists all ProvisioningRequests in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ProvisioningRequest, err error)
	// Get retrieves the ProvisioningRequest from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.ProvisioningRequest, error)
	ProvisioningRequestNamespaceListerExpansion
}

// provisioningRequestNamespaceLister implements the ProvisioningRequestNamespaceLister
// interface.
type provisioningRequestNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProvisioningRequests in the indexer for a given namespace.
func (s provisioningRequestNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ProvisioningRequest, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ProvisioningRequest))
	})
	return ret, err
}

// Get retrieves the ProvisioningRequest from the indexer for a given namespace and name.
func (s provisioningRequestNamespaceLister) Get(name string) (*v1beta1.ProvisioningRequest, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("provisioningrequest"), name)
	}
	return obj.(*v1beta1.ProvisioningRequest), nil
}
