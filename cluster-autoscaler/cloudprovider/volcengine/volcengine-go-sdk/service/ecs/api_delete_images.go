// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/volcengine/volcengine-go-sdk/volcengine"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/volcengine/volcengine-go-sdk/volcengine/request"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/volcengine/volcengine-go-sdk/volcengine/response"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteImagesCommon = "DeleteImages"

// DeleteImagesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteImagesCommon operation. The "output" return
// value will be populated with the DeleteImagesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteImagesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteImagesCommon Send returns without error.
//
// See DeleteImagesCommon for more information on using the DeleteImagesCommon
// API call, and error handling.
//
//	// Example sending a request using the DeleteImagesCommonRequest method.
//	req, resp := client.DeleteImagesCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *ECS) DeleteImagesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteImagesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteImagesCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DeleteImagesCommon for usage and error information.
func (c *ECS) DeleteImagesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteImagesCommonRequest(input)
	return out, req.Send()
}

// DeleteImagesCommonWithContext is the same as DeleteImagesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteImagesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteImagesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteImagesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteImages = "DeleteImages"

// DeleteImagesRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteImages operation. The "output" return
// value will be populated with the DeleteImagesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteImagesCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteImagesCommon Send returns without error.
//
// See DeleteImages for more information on using the DeleteImages
// API call, and error handling.
//
//	// Example sending a request using the DeleteImagesRequest method.
//	req, resp := client.DeleteImagesRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *ECS) DeleteImagesRequest(input *DeleteImagesInput) (req *request.Request, output *DeleteImagesOutput) {
	op := &request.Operation{
		Name:       opDeleteImages,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteImagesInput{}
	}

	output = &DeleteImagesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteImages API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DeleteImages for usage and error information.
func (c *ECS) DeleteImages(input *DeleteImagesInput) (*DeleteImagesOutput, error) {
	req, out := c.DeleteImagesRequest(input)
	return out, req.Send()
}

// DeleteImagesWithContext is the same as DeleteImages with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteImages for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteImagesWithContext(ctx volcengine.Context, input *DeleteImagesInput, opts ...request.Option) (*DeleteImagesOutput, error) {
	req, out := c.DeleteImagesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteImagesInput struct {
	_ struct{} `type:"structure"`

	ImageIds []*string `type:"list"`
}

// String returns the string representation
func (s DeleteImagesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteImagesInput) GoString() string {
	return s.String()
}

// SetImageIds sets the ImageIds field's value.
func (s *DeleteImagesInput) SetImageIds(v []*string) *DeleteImagesInput {
	s.ImageIds = v
	return s
}

type DeleteImagesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	OperationDetails []*OperationDetailForDeleteImagesOutput `type:"list"`
}

// String returns the string representation
func (s DeleteImagesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteImagesOutput) GoString() string {
	return s.String()
}

// SetOperationDetails sets the OperationDetails field's value.
func (s *DeleteImagesOutput) SetOperationDetails(v []*OperationDetailForDeleteImagesOutput) *DeleteImagesOutput {
	s.OperationDetails = v
	return s
}

type ErrorForDeleteImagesOutput struct {
	_ struct{} `type:"structure"`

	Code *string `type:"string"`

	Message *string `type:"string"`
}

// String returns the string representation
func (s ErrorForDeleteImagesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ErrorForDeleteImagesOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *ErrorForDeleteImagesOutput) SetCode(v string) *ErrorForDeleteImagesOutput {
	s.Code = &v
	return s
}

// SetMessage sets the Message field's value.
func (s *ErrorForDeleteImagesOutput) SetMessage(v string) *ErrorForDeleteImagesOutput {
	s.Message = &v
	return s
}

type OperationDetailForDeleteImagesOutput struct {
	_ struct{} `type:"structure"`

	Error *ErrorForDeleteImagesOutput `type:"structure"`

	ImageId *string `type:"string"`
}

// String returns the string representation
func (s OperationDetailForDeleteImagesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s OperationDetailForDeleteImagesOutput) GoString() string {
	return s.String()
}

// SetError sets the Error field's value.
func (s *OperationDetailForDeleteImagesOutput) SetError(v *ErrorForDeleteImagesOutput) *OperationDetailForDeleteImagesOutput {
	s.Error = v
	return s
}

// SetImageId sets the ImageId field's value.
func (s *OperationDetailForDeleteImagesOutput) SetImageId(v string) *OperationDetailForDeleteImagesOutput {
	s.ImageId = &v
	return s
}
