// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/volcengine/volcengine-go-sdk/volcengine"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/volcengine/volcengine-go-sdk/volcengine/request"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/volcengine/volcengine-go-sdk/volcengine/response"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeInstanceECSTerminalUrlCommon = "DescribeInstanceECSTerminalUrl"

// DescribeInstanceECSTerminalUrlCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeInstanceECSTerminalUrlCommon operation. The "output" return
// value will be populated with the DescribeInstanceECSTerminalUrlCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstanceECSTerminalUrlCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstanceECSTerminalUrlCommon Send returns without error.
//
// See DescribeInstanceECSTerminalUrlCommon for more information on using the DescribeInstanceECSTerminalUrlCommon
// API call, and error handling.
//
//	// Example sending a request using the DescribeInstanceECSTerminalUrlCommonRequest method.
//	req, resp := client.DescribeInstanceECSTerminalUrlCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *ECS) DescribeInstanceECSTerminalUrlCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeInstanceECSTerminalUrlCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceECSTerminalUrlCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DescribeInstanceECSTerminalUrlCommon for usage and error information.
func (c *ECS) DescribeInstanceECSTerminalUrlCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceECSTerminalUrlCommonRequest(input)
	return out, req.Send()
}

// DescribeInstanceECSTerminalUrlCommonWithContext is the same as DescribeInstanceECSTerminalUrlCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceECSTerminalUrlCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceECSTerminalUrlCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeInstanceECSTerminalUrlCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeInstanceECSTerminalUrl = "DescribeInstanceECSTerminalUrl"

// DescribeInstanceECSTerminalUrlRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeInstanceECSTerminalUrl operation. The "output" return
// value will be populated with the DescribeInstanceECSTerminalUrlCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeInstanceECSTerminalUrlCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeInstanceECSTerminalUrlCommon Send returns without error.
//
// See DescribeInstanceECSTerminalUrl for more information on using the DescribeInstanceECSTerminalUrl
// API call, and error handling.
//
//	// Example sending a request using the DescribeInstanceECSTerminalUrlRequest method.
//	req, resp := client.DescribeInstanceECSTerminalUrlRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *ECS) DescribeInstanceECSTerminalUrlRequest(input *DescribeInstanceECSTerminalUrlInput) (req *request.Request, output *DescribeInstanceECSTerminalUrlOutput) {
	op := &request.Operation{
		Name:       opDescribeInstanceECSTerminalUrl,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeInstanceECSTerminalUrlInput{}
	}

	output = &DescribeInstanceECSTerminalUrlOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeInstanceECSTerminalUrl API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DescribeInstanceECSTerminalUrl for usage and error information.
func (c *ECS) DescribeInstanceECSTerminalUrl(input *DescribeInstanceECSTerminalUrlInput) (*DescribeInstanceECSTerminalUrlOutput, error) {
	req, out := c.DescribeInstanceECSTerminalUrlRequest(input)
	return out, req.Send()
}

// DescribeInstanceECSTerminalUrlWithContext is the same as DescribeInstanceECSTerminalUrl with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeInstanceECSTerminalUrl for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DescribeInstanceECSTerminalUrlWithContext(ctx volcengine.Context, input *DescribeInstanceECSTerminalUrlInput, opts ...request.Option) (*DescribeInstanceECSTerminalUrlOutput, error) {
	req, out := c.DescribeInstanceECSTerminalUrlRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeInstanceECSTerminalUrlInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstanceECSTerminalUrlInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceECSTerminalUrlInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeInstanceECSTerminalUrlInput) SetInstanceId(v string) *DescribeInstanceECSTerminalUrlInput {
	s.InstanceId = &v
	return s
}

type DescribeInstanceECSTerminalUrlOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	EcsTerminalUrl *string `type:"string"`
}

// String returns the string representation
func (s DescribeInstanceECSTerminalUrlOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeInstanceECSTerminalUrlOutput) GoString() string {
	return s.String()
}

// SetEcsTerminalUrl sets the EcsTerminalUrl field's value.
func (s *DescribeInstanceECSTerminalUrlOutput) SetEcsTerminalUrl(v string) *DescribeInstanceECSTerminalUrlOutput {
	s.EcsTerminalUrl = &v
	return s
}
