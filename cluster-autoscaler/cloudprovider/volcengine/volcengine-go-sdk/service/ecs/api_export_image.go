// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/volcengine/volcengine-go-sdk/volcengine"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/volcengine/volcengine-go-sdk/volcengine/request"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/volcengine/volcengine-go-sdk/volcengine/response"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opExportImageCommon = "ExportImage"

// ExportImageCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ExportImageCommon operation. The "output" return
// value will be populated with the ExportImageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ExportImageCommon Request to send the API call to the service.
// the "output" return value is not valid until after ExportImageCommon Send returns without error.
//
// See ExportImageCommon for more information on using the ExportImageCommon
// API call, and error handling.
//
//	// Example sending a request using the ExportImageCommonRequest method.
//	req, resp := client.ExportImageCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *ECS) ExportImageCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opExportImageCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ExportImageCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation ExportImageCommon for usage and error information.
func (c *ECS) ExportImageCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ExportImageCommonRequest(input)
	return out, req.Send()
}

// ExportImageCommonWithContext is the same as ExportImageCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ExportImageCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ExportImageCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ExportImageCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opExportImage = "ExportImage"

// ExportImageRequest generates a "volcengine/request.Request" representing the
// client's request for the ExportImage operation. The "output" return
// value will be populated with the ExportImageCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ExportImageCommon Request to send the API call to the service.
// the "output" return value is not valid until after ExportImageCommon Send returns without error.
//
// See ExportImage for more information on using the ExportImage
// API call, and error handling.
//
//	// Example sending a request using the ExportImageRequest method.
//	req, resp := client.ExportImageRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *ECS) ExportImageRequest(input *ExportImageInput) (req *request.Request, output *ExportImageOutput) {
	op := &request.Operation{
		Name:       opExportImage,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ExportImageInput{}
	}

	output = &ExportImageOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ExportImage API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation ExportImage for usage and error information.
func (c *ECS) ExportImage(input *ExportImageInput) (*ExportImageOutput, error) {
	req, out := c.ExportImageRequest(input)
	return out, req.Send()
}

// ExportImageWithContext is the same as ExportImage with the addition of
// the ability to pass a context and additional request options.
//
// See ExportImage for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) ExportImageWithContext(ctx volcengine.Context, input *ExportImageInput, opts ...request.Option) (*ExportImageOutput, error) {
	req, out := c.ExportImageRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ExportImageInput struct {
	_ struct{} `type:"structure"`

	ImageId *string `type:"string"`

	TOSBucket *string `type:"string"`

	TOSPrefix *string `type:"string"`
}

// String returns the string representation
func (s ExportImageInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ExportImageInput) GoString() string {
	return s.String()
}

// SetImageId sets the ImageId field's value.
func (s *ExportImageInput) SetImageId(v string) *ExportImageInput {
	s.ImageId = &v
	return s
}

// SetTOSBucket sets the TOSBucket field's value.
func (s *ExportImageInput) SetTOSBucket(v string) *ExportImageInput {
	s.TOSBucket = &v
	return s
}

// SetTOSPrefix sets the TOSPrefix field's value.
func (s *ExportImageInput) SetTOSPrefix(v string) *ExportImageInput {
	s.TOSPrefix = &v
	return s
}

type ExportImageOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	TaskId *string `type:"string"`
}

// String returns the string representation
func (s ExportImageOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ExportImageOutput) GoString() string {
	return s.String()
}

// SetTaskId sets the TaskId field's value.
func (s *ExportImageOutput) SetTaskId(v string) *ExportImageOutput {
	s.TaskId = &v
	return s
}
