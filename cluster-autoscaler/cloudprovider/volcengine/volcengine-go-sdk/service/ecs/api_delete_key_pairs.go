// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package ecs

import (
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/volcengine/volcengine-go-sdk/volcengine"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/volcengine/volcengine-go-sdk/volcengine/request"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/volcengine/volcengine-go-sdk/volcengine/response"
	"k8s.io/autoscaler/cluster-autoscaler/cloudprovider/volcengine/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteKeyPairsCommon = "DeleteKeyPairs"

// DeleteKeyPairsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteKeyPairsCommon operation. The "output" return
// value will be populated with the DeleteKeyPairsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteKeyPairsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteKeyPairsCommon Send returns without error.
//
// See DeleteKeyPairsCommon for more information on using the DeleteKeyPairsCommon
// API call, and error handling.
//
//	// Example sending a request using the DeleteKeyPairsCommonRequest method.
//	req, resp := client.DeleteKeyPairsCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *ECS) DeleteKeyPairsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteKeyPairsCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteKeyPairsCommon API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DeleteKeyPairsCommon for usage and error information.
func (c *ECS) DeleteKeyPairsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteKeyPairsCommonRequest(input)
	return out, req.Send()
}

// DeleteKeyPairsCommonWithContext is the same as DeleteKeyPairsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteKeyPairsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteKeyPairsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteKeyPairsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteKeyPairs = "DeleteKeyPairs"

// DeleteKeyPairsRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteKeyPairs operation. The "output" return
// value will be populated with the DeleteKeyPairsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteKeyPairsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteKeyPairsCommon Send returns without error.
//
// See DeleteKeyPairs for more information on using the DeleteKeyPairs
// API call, and error handling.
//
//	// Example sending a request using the DeleteKeyPairsRequest method.
//	req, resp := client.DeleteKeyPairsRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *ECS) DeleteKeyPairsRequest(input *DeleteKeyPairsInput) (req *request.Request, output *DeleteKeyPairsOutput) {
	op := &request.Operation{
		Name:       opDeleteKeyPairs,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteKeyPairsInput{}
	}

	output = &DeleteKeyPairsOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteKeyPairs API operation for ECS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ECS's
// API operation DeleteKeyPairs for usage and error information.
func (c *ECS) DeleteKeyPairs(input *DeleteKeyPairsInput) (*DeleteKeyPairsOutput, error) {
	req, out := c.DeleteKeyPairsRequest(input)
	return out, req.Send()
}

// DeleteKeyPairsWithContext is the same as DeleteKeyPairs with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteKeyPairs for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *ECS) DeleteKeyPairsWithContext(ctx volcengine.Context, input *DeleteKeyPairsInput, opts ...request.Option) (*DeleteKeyPairsOutput, error) {
	req, out := c.DeleteKeyPairsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteKeyPairsInput struct {
	_ struct{} `type:"structure"`

	KeyPairNames []*string `type:"list"`
}

// String returns the string representation
func (s DeleteKeyPairsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteKeyPairsInput) GoString() string {
	return s.String()
}

// SetKeyPairNames sets the KeyPairNames field's value.
func (s *DeleteKeyPairsInput) SetKeyPairNames(v []*string) *DeleteKeyPairsInput {
	s.KeyPairNames = v
	return s
}

type DeleteKeyPairsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	OperationDetails []*OperationDetailForDeleteKeyPairsOutput `type:"list"`
}

// String returns the string representation
func (s DeleteKeyPairsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteKeyPairsOutput) GoString() string {
	return s.String()
}

// SetOperationDetails sets the OperationDetails field's value.
func (s *DeleteKeyPairsOutput) SetOperationDetails(v []*OperationDetailForDeleteKeyPairsOutput) *DeleteKeyPairsOutput {
	s.OperationDetails = v
	return s
}

type ErrorForDeleteKeyPairsOutput struct {
	_ struct{} `type:"structure"`

	Code *string `type:"string"`

	Message *string `type:"string"`
}

// String returns the string representation
func (s ErrorForDeleteKeyPairsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ErrorForDeleteKeyPairsOutput) GoString() string {
	return s.String()
}

// SetCode sets the Code field's value.
func (s *ErrorForDeleteKeyPairsOutput) SetCode(v string) *ErrorForDeleteKeyPairsOutput {
	s.Code = &v
	return s
}

// SetMessage sets the Message field's value.
func (s *ErrorForDeleteKeyPairsOutput) SetMessage(v string) *ErrorForDeleteKeyPairsOutput {
	s.Message = &v
	return s
}

type OperationDetailForDeleteKeyPairsOutput struct {
	_ struct{} `type:"structure"`

	Error *ErrorForDeleteKeyPairsOutput `type:"structure"`

	KeyPairName *string `type:"string"`
}

// String returns the string representation
func (s OperationDetailForDeleteKeyPairsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s OperationDetailForDeleteKeyPairsOutput) GoString() string {
	return s.String()
}

// SetError sets the Error field's value.
func (s *OperationDetailForDeleteKeyPairsOutput) SetError(v *ErrorForDeleteKeyPairsOutput) *OperationDetailForDeleteKeyPairsOutput {
	s.Error = v
	return s
}

// SetKeyPairName sets the KeyPairName field's value.
func (s *OperationDetailForDeleteKeyPairsOutput) SetKeyPairName(v string) *OperationDetailForDeleteKeyPairsOutput {
	s.KeyPairName = &v
	return s
}
