/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	v1alpha1 "k8s.io/autoscaler/balancer/pkg/apis/balancer.x-k8s.io/v1alpha1"
	"k8s.io/client-go/tools/cache"
)

// BalancerLister helps list Balancers.
// All objects returned here must be treated as read-only.
type BalancerLister interface {
	// List lists all Balancers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Balancer, err error)
	// Balancers returns an object that can list and get Balancers.
	Balancers(namespace string) BalancerNamespaceLister
	BalancerListerExpansion
}

// balancerLister implements the BalancerLister interface.
type balancerLister struct {
	indexer cache.Indexer
}

// NewBalancerLister returns a new BalancerLister.
func NewBalancerLister(indexer cache.Indexer) BalancerLister {
	return &balancerLister{indexer: indexer}
}

// List lists all Balancers in the indexer.
func (s *balancerLister) List(selector labels.Selector) (ret []*v1alpha1.Balancer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Balancer))
	})
	return ret, err
}

// Balancers returns an object that can list and get Balancers.
func (s *balancerLister) Balancers(namespace string) BalancerNamespaceLister {
	return balancerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BalancerNamespaceLister helps list and get Balancers.
// All objects returned here must be treated as read-only.
type BalancerNamespaceLister interface {
	// List lists all Balancers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Balancer, err error)
	// Get retrieves the Balancer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Balancer, error)
	BalancerNamespaceListerExpansion
}

// balancerNamespaceLister implements the BalancerNamespaceLister
// interface.
type balancerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Balancers in the indexer for a given namespace.
func (s balancerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Balancer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Balancer))
	})
	return ret, err
}

// Get retrieves the Balancer from the indexer for a given namespace and name.
func (s balancerNamespaceLister) Get(name string) (*v1alpha1.Balancer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("balancer"), name)
	}
	return obj.(*v1alpha1.Balancer), nil
}
